var gt = new Gettext({
    domain: 'en_US',
    locale_data: {
        en_US : {
            '' : {
                'plural-forms' : "nplurals=2; plural=(n != 1);"
            },
            /*  value: [ Heading, Content ] */
				
'abstract class' : [ null, ['Abstract class', 'A class that cannot be instantiated.'] ],
'abstract data type' : [ null, ['Abstract data type', 'A specification of the fundamental operations that characterize a data type, without supplying an implementation.'] ],
'abstract data types' : [ null, ['Abstract data type', 'A specification of the fundamental operations that characterize a data type, without supplying an implementation.'] ],
'abstract method' : [ null, ['Abstract method', 'A method with a name, parameter variable types, and return type but without an implementation.'] ],
'access specifier' : [ null, ['Access specifier', 'A reserved word that indicates the accessibility of a feature, such as Â­private or public.'] ],
'accessor method' : [ null, ['Accessor method', 'A method that accesses an object but does not change it.'] ],
'accessor' : [ null, ['Accessor method', 'A method that accesses an object but does not change it.'] ],
'aggregation' : [ null, ['Aggregation', 'The <span class="T4">has-a</span> relationship between classes.'] ],
'algorithm' : [ null, ['Algorithm', 'An unambiguous, executable, and terminating specification of a way to solve a problem.'] ],
'anonymous class' : [ null, ['Anonymous class', 'A class that does not have a name.'] ],
'anonymous object' : [ null, ['Anonymous object', 'An object that is not stored in a named variable.'] ],
'API' : [ null, ['API (Application Programming Interface)', 'A code library for building programs.'] ],
'application programming interface' : [ null, ['API (Application Programming Interface)', 'A code library for building programs.'] ],
'API documentation' : [ null, ['API Documentation', 'Information about each class in the Java library.'] ],
'applet' : [ null, ['Applet', 'A graphical Java program that executes inside a web browser or applet viewer.'] ],
'applets' : [ null, ['Applet', 'A graphical Java program that executes inside a web browser or applet viewer.'] ],
'argument' : [ null, ['Argument', 'A value supplied in a method call, or one of the values combined by an operator.'] ],
'arguments' : [ null, ['Argument', 'A value supplied in a method call, or one of the values combined by an operator.'] ],
'array' : [ null, ['Array', 'A collection of values of the same type stored in contiguous memory locations, each of which can be accessed by an integer index.'] ],
'array list' : [ null, ['Array list', 'A Java class that implements a dynamically-growable array of objects.'] ],
'assertion' : [ null, ['Assertion', 'A claim that a certain condition holds in a particular program location.'] ],
'assignment' : [ null, ['Assignment', 'Placing a new value into a variable.'] ],
'association' : [ null, ['Association', 'A relationship between classes in which one can navigate from objects of one class to objects of the other class, usually by following object references. '] ],
'asymmetric bounds' : [ null, ['Asymmetric bounds', 'Bounds that include the starting index but not the ending index.'] ],
'asymmetric' : [ null, ['Asymmetric bounds', 'Bounds that include the starting index but not the ending index.'] ],
'attribute' : [ null, ['Attribute', 'A named property that an object is responsible for maintaining.'] ],
'auto-boxing' : [ null, ['Auto-boxing', 'Automatically converting a primitive type value into a wrapper type object.'] ],
'balanced tree' : [ null, ['Balanced tree', 'A tree in which each subtree has the property that the number of descendants to the left is approximately the same as the number of descendants to the right.'] ],
'behavior' : [ null, ['Behavior (of an object)', 'The actions taken by an object when its methods are invoked.'] ],
'big-Oh notation' : [ null, ['Big-Oh notation', 'The notation <span class="T4">g</span>(<span class="T4">n</span>)&#160;<span class="Symbol">=</span>&#160;<span class="T4">O</span>(<span class="T4">f</span>(<span class="T4">n</span>)), which denotes that the function <span class="T4">g</span> grows at a rate that is bounded by the growth rate of the function <span class="T4">f</span> with respect to <span class="T4">n</span>. For example, 10<span class="T4">n</span><span class="Superscript _idGenCharOverride-1">2</span>&#160;<span class="Symbol">+</span>&#160;100<span class="T4">n</span>&#160;<span class="Symbol">-</span>&#160;1000&#160;<span class="Symbol">=</span>&#160;<span class="T4">O</span>(<span class="T4">n</span><span class="Superscript _idGenCharOverride-1">2</span>).'] ],
'binary file' : [ null, ['Binary file', 'A file in which values are stored in their binary representation and cannot be read as text.'] ],
'binary operator' : [ null, ['Binary operator', 'An operator that takes two arguments, for example <span class="Symbol">+</span> in <span class="T4">x</span>&#160;<span class="Symbol">+&#160;</span><span class="T4">y</span>.'] ],
'binary search' : [ null, ['Binary search', 'A fast algorithm for finding a value in a sorted array. It narrows the search down to half of the array in every step.'] ],
'binary search tree' : [ null, ['Binary search tree', 'A binary tree in which <span class="T4">each</span> subtree has the property that all left descendants are smaller than the value stored in the root, and all right descendants are larger.'] ],
'binary search trees' : [ null, ['Binary search tree', 'A binary tree in which <span class="T4">each</span> subtree has the property that all left descendants are smaller than the value stored in the root, and all right descendants are larger.'] ],
'binary tree' : [ null, ['Binary tree', 'A tree in which each node has at most two child nodes.'] ],
'binary trees' : [ null, ['Binary tree', 'A tree in which each node has at most two child nodes.'] ],
'bit' : [ null, ['Bit', 'Binary digit; the smallest unit of information, having two possible values: 0 and 1. A data element consisting of <span class="T4">n</span> bits has 2<span class="SuperscriptItalic _idGenCharOverride-1">n</span> possible values.'] ],
'bits' : [ null, ['Bit', 'Binary digit; the smallest unit of information, having two possible values: 0 and 1. A data element consisting of <span class="T4">n</span> bits has 2<span class="SuperscriptItalic _idGenCharOverride-1">n</span> possible values.'] ],
'black-box testing' : [ null, ['Black-box testing', 'Testing a method without knowing its implementation.'] ],
'block' : [ null, ['Block', 'A group of statements bracketed by <code>{}</code>.'] ],
'body' : [ null, ['Body', 'All statements of a method or block.'] ],
'Boolean operator' : [ null, ['Boolean operator', 'An operator that can be applied to Boolean values. Java has three Boolean operators: <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code>.'] ],
'Boolean type' : [ null, ['Boolean type', 'A type with two possible values: <code>true</code> and <code>false</code>.'] ],
'border layout' : [ null, ['Border layout', 'A layout management scheme in which components are placed into the center or one of the four borders of their container. '] ],
'boundary test case' : [ null, ['Boundary test case', 'A test case involving values that are at the outer boundary of the set of legal values. For example, if a method is expected to work for all nonnegative integers, then 0 is a boundary test case.'] ],
'boundary test cases' : [ null, ['Boundary test case', 'A test case involving values that are at the outer boundary of the set of legal values. For example, if a method is expected to work for all nonnegative integers, then 0 is a boundary test case.'] ],
'bounds error' : [ null, ['Bounds error', 'Trying to access an array element that is outside the legal range.'] ],
'break statement' : [ null, ['<code>break</code> statement', 'A statement that terminates a loop or <code>switch</code> statement.'] ],
'breakpoint' : [ null, ['Breakpoint', 'A point in a program, specified in a debugger, at which the debugger stops executing the program and lets the user inspect the program state.'] ],
'buffer' : [ null, ['Buffer', 'A temporary storage location for holding values that have been produced (for example, characters typed by the user) and are waiting to be consumed (for example, read a line at a time).'] ],
'bug' : [ null, ['Bug', 'A programming error.'] ],
'byte' : [ null, ['Byte', 'A number made up of eight bits. Essentially all currently manufactured computers use a byte as the smallest unit of storage in memory.'] ],
'bytes' : [ null, ['Byte', 'A number made up of eight bits. Essentially all currently manufactured computers use a byte as the smallest unit of storage in memory.'] ],
'bytecode' : [ null, ['Bytecode', 'Instructions for the Java virtual machine.'] ],
'call stack' : [ null, ['Call stack', 'The ordered set of all methods that currently have been called but not yet terminated, starting with the current method and ending with <code>main</code>.'] ],
'callback' : [ null, ['Callback', 'A mechanism for specifying a block of code so it can be executed at a later time.'] ],
'case sensitive' : [ null, ['Case sensitive', 'Distinguishing upper- and lowercase characters.'] ],
'cast' : [ null, ['Cast', 'Explicitly converting a value from one type to a different type. For example, the cast from a floating-point number <code>x</code> to an integer is expressed in Java by the cast notation <code>(int)&#160;x</code>.'] ],
'catch clause' : [ null, ['<code>catch</code> clause', 'A part of a <code>try</code> block that is executed when a matching exception is thrown by any statement in the <code>try</code> block.'] ],
'central processing unit' : [ null, ['Central&#160;processing&#160;unit&#160;(CPU)', 'The part of a computer that executes the machine instructions.'] ],
'central processing unit (CPU)' : [ null, ['Central&#160;processing&#160;unit&#160;(CPU)', 'The part of a computer that executes the machine instructions.'] ],
'character' : [ null, ['Character', 'A single letter, digit, or symbol.'] ],
'characters' : [ null, ['Character', 'A single letter, digit, or symbol.'] ],
'check box' : [ null, ['Check box', 'A user-interface component that can be used for a binary selection.'] ],
'checked exception' : [ null, ['Checked exception', 'An exception that the compiler checks. All checked exceptions must be declared or caught.'] ],
'checked exceptions' : [ null, ['Checked exception', 'An exception that the compiler checks. All checked exceptions must be declared or caught.'] ],
'class' : [ null, ['Class', 'A programmer-defined data type.'] ],
'client' : [ null, ['Client', 'A computer program or system that issues requests to a server and processes the server responses.'] ],
'code coverage' : [ null, ['Code coverage', 'A measure of the amount of source code that has been executed during Â­testing.'] ],
'cohesion' : [ null, ['Cohesion', 'A class is cohesive if its features support a single abstraction.'] ],
'cohesive' : [ null, ['Cohesive', 'A class is cohesive if its features support a single abstraction.'] ],
'collection' : [ null, ['Collection', 'A data structure that provides a mechanism for adding, removing, and locating elements.'] ],
'collector' : [ null, ['Collector', 'An object that collects elements, usually from a stream, combining them into a result.'] ],
'collaborator' : [ null, ['Collaborator', 'A class on which another class depends.'] ],
'collaborators' : [ null, ['Collaborator', 'A class on which another class depends.'] ],
'combo box' : [ null, ['Combo box', 'A user-interface component that combines a text field with a drop-down list of selections.'] ],
'command line' : [ null, ['Command line', 'The line the user types to start a program in DOS or UNIX or a command window in Windows. It consists of the program name followed by any necessary arguments.'] ],
'command line arguments' : [ null, ['Command line', 'The line the user types to start a program in DOS or UNIX or a command window in Windows. It consists of the program name followed by any necessary arguments.'] ],
'comment' : [ null, ['Comment', 'An explanation to help the human reader understand a section of a program; ignored by the compiler.'] ],
'comments' : [ null, ['Comment', 'An explanation to help the human reader understand a section of a program; ignored by the compiler.'] ],
'compiler' : [ null, ['Compiler', 'A program that translates code in a high-level language (such as Java) to machine instructions (such as bytecode for the Java virtual machine).'] ],
'compile-time error' : [ null, ['Compile-time error', 'An error that is detected when a program is compiled.'] ],
'component' : [ null, ['Component', 'A building block for a graphical user interface, such as a button or a text field. User-interface components are used to present information to the user and allow the user to enter information to the program.'] ],
'composition' : [ null, ['Composition', 'An aggregation relationship where the aggregated objects do not have an existence independent of the containing object.'] ],
'computer program' : [ null, ['Computer program', 'A sequence of instructions that is executed by a computer.'] ],
'concatenation' : [ null, ['Concatenation', 'Placing one string after another to form a new string.'] ],
'concatenate' : [ null, ['Concatenation', 'Placing one string after another to form a new string.'] ],
'concrete class' : [ null, ['Concrete class', 'A class that can be instantiated.'] ],
'condition object' : [ null, ['Condition object', 'An object that manages threads that currently cannot proceed.'] ],
'console program' : [ null, ['Console program', 'A Java program that does not have a graphical window. A console program reads input from the keyboard and writes output to the terminal screen.'] ],
'constant' : [ null, ['Constant', 'A value that cannot be changed by a program. In Java, constants are defined with the reserved word <code>final</code>.'] ],
'constants' : [ null, ['Constant', 'A value that cannot be changed by a program. In Java, constants are defined with the reserved word <code>final</code>.'] ],
'construction' : [ null, ['Construction', 'Setting a newly allocated object to an initial state.'] ],
'constructor' : [ null, ['Constructor', 'A sequence of statements for initializing a newly instantiated object.'] ],
'constructor reference' : [ null, ['Constructor reference', 'An expression of the form <code>Class::new</code> or <code>Class[]::new</code> that, like a lambda expression, can be converted into an instance of a functional interface.'] ],
'container' : [ null, ['Container', 'A user-interface component that can hold other components and present them together to the user. Also, a data structure, such as a list, that can hold a collection of objects and present them individually to a program.'] ],
'content pane' : [ null, ['Content pane', 'The part of a Swing frame that holds the user-interface components of the frame.'] ],
'coupling' : [ null, ['Coupling', 'The degree to which classes are related to each other by dependency.'] ],
'CRC card' : [ null, ['CRC card', 'An index card representing a class that lists its responsibilities and collaborating classes.'] ],
'De Morgan&#8217;s Law' : [ null, ['De Morgan&#8217;s Law', 'A law about logical operations that describes how to negate expressions formed with <span class="T4">and</span> and <span class="T4">or</span> operations.'] ],
'deadlock' : [ null, ['Deadlock', 'A state in which no thread can proceed because each thread is waiting for another to do some work first.'] ],
'deadly embrace' : [ null, ['Deadly embrace', 'A set of blocked threads, each of which could only be unblocked by the action of other threads in the set.'] ],
'debugger' : [ null, ['Debugger', 'A program that lets a user run another program one or a few steps at a time, stop execution, and inspect the variables in order to analyze it for bugs.'] ],
'debuggers' : [ null, ['Debugger', 'A program that lets a user run another program one or a few steps at a time, stop execution, and inspect the variables in order to analyze it for bugs.'] ],
'default method' : [ null, ['Default method', 'A non-static method that has an implementation in an interface.'] ],
'dependency' : [ null, ['Dependency', 'The <span class="T4">uses</span> relationship between classes, in which one class needs services provided by another class.'] ],
'directory' : [ null, ['Directory', 'A structure on a disk that can hold files or other directories; also called a folder.'] ],
'directories' : [ null, ['Directory', 'A structure on a disk that can hold files or other directories; also called a folder.'] ],
'documentation comment' : [ null, ['Documentation comment', 'A comment in a source file that can be automatically extracted into the program docÂ­umentation by a program such as <code>javadoc</code>.'] ],
'documentation comments' : [ null, ['Documentation comment', 'A comment in a source file that can be automatically extracted into the program docÂ­umentation by a program such as <code>javadoc</code>.'] ],
'dot notation' : [ null, ['Dot notation', 'The notation <span class="T4">object.method(arguments)</span> or <span class="T4">object.variable</span> used to invoke a method or access a variable.'] ],
'doubly-linked list' : [ null, ['Doubly-linked list', 'A linked list in which each link has a reference to both its predecessor and successor links.'] ],
'DTD' : [ null, ['DTD (Document Type Definition)', 'A sequence of rules that describes the legal child elements and attributes for each element type in an SGML or XML document. '] ],
'dynamic method lookup' : [ null, ['Dynamic method lookup', 'Selecting a method to be invoked at run time. In Java, dynamic method lookup considers the class of the implicit parameter object to select the appropriate method.'] ],
'editor' : [ null, ['Editor', 'A program for writing and modifying text files.'] ],
'embedded system' : [ null, ['Embedded system', 'The processor, software, and supporting circuitry that is included in a device other than a computer.'] ],
'encapsulation' : [ null, ['Encapsulation', 'The hiding of implementation details.'] ],
'enumeration type' : [ null, ['Enumeration type', 'A type with a finite number of values, each of which has its own symbolic name.'] ],
'enumeration types' : [ null, ['Enumeration type', 'A type with a finite number of values, each of which has its own symbolic name.'] ],
'Enumeration types' : [ null, ['Enumeration type', 'A type with a finite number of values, each of which has its own symbolic name.'] ],
'escape character' : [ null, ['Escape character', 'A character in text that is not taken literally but has a special meaning when combined with the character or characters that follow it. The <code>\\n</code> character is an escape character in Java strings.'] ],
'escape sequence' : [ null, ['Escape sequence', 'A sequence of characters that starts with an escape character, such as <code>\\n</code> or <code>\\&#x0022;</code>.'] ],
'event' : [ null, ['User-interface event', 'A notification to a program that a user action such as a key press, mouse move, or menu selection has occurred.'] ],
'event class' : [ null, ['Event class', 'A class that contains information about an event, such as its source.'] ],
'event adapter' : [ null, ['Event adapter', 'A class that implements an event listener interface by defining all methods to do nothing.'] ],
'event handler' : [ null, ['Event handler', 'A method that is executed when an event occurs.'] ],
'event listener' : [ null, ['Event listener', 'An object that is notified by an event source when an event occurs.'] ],
'event source' : [ null, ['Event source', 'An object that can notify other classes of events.'] ],
'exception' : [ null, ['Exception', 'A class that signals a condition that prevents the program from continuing normally. When such a condition occurs, an object of the exception class is thrown.'] ],
'exception handler' : [ null, ['Exception handler', 'A sequence of statements that is given control when an exception of a particular type has been thrown and caught.'] ],
'explicit parameter' : [ null, ['Explicit parameter', 'A parameter of a method other than the object on which the method is invoked.'] ],
'explicit parameters' : [ null, ['Explicit parameter', 'A parameter of a method other than the object on which the method is invoked.'] ],
'expression' : [ null, ['Expression', 'A syntactical construct that is made up of constants, variables, method calls, and the operators combining them.'] ],
'extension' : [ null, ['Extension', 'The last part of a file name, which specifies the file type. For example, the extension<code> .java</code> denotes a Java file.'] ],
'Fibonacci numbers' : [ null, ['Fibonacci numbers', 'The sequence of numbers 1, 1, 2, 3, 5, 8, 13,&#160;.&#160;.&#160;. , in which every term is the sum of its two predecessors.'] ],
'File' : [ null, ['File', 'A sequence of bytes that is stored on disk.'] ],
'files' : [ null, ['File', 'A sequence of bytes that is stored on disk.'] ],
'File pointer' : [ null, ['File pointer', 'The position within a random-access file of the next byte to be read or written. It can be moved so as to access any byte in the file.'] ],
'file pointer' : [ null, ['File pointer', 'The position within a random-access file of the next byte to be read or written. It can be moved so as to access any byte in the file.'] ],
'finally clause' : [ null, ['<code>finally</code> clause', 'A part of a <code>try</code> block that is executed no matter how the <code>try</code> block is exited.'] ],
'flag' : [ null, ['Flag', 'A type with two possible values: <code>true</code> and <code>false</code>.'] ],
'floating-point number' : [ null, ['Floating-point number', 'A number that can have a fractional part.'] ],
'floating-point numbers' : [ null, ['Floating-point number', 'A number that can have a fractional part.'] ],
'flow layout' : [ null, ['Flow layout', 'A layout management scheme in which components are laid out left to right.'] ],
'flushing a stream' : [ null, ['Flushing an output stream', 'Sending all characters that are still held in a buffer to their destination.'] ],
'flushing an output stream' : [ null, ['Flushing an output stream', 'Sending all characters that are still held in a buffer to their destination.'] ],
'folder' : [ null, ['Folder', 'A structure on a disk that can hold files or other folders; also called a directory.'] ],
'folders' : [ null, ['Folder', 'A structure on a disk that can hold files or other folders; also called a directory.'] ],
'font' : [ null, ['Font', 'A set of character shapes in a particular style and size.'] ],
'foreign key' : [ null, ['Foreign key', 'A reference to a primary key in a linked table.'] ],
'frame' : [ null, ['Frame', 'A window with a border and a title bar.'] ],
'function' : [ null, ['Function', 'A function, in the mathematical sense, yields a result for any assignment of values to its parameters. In Java, functions can be implemented as lambda expressions or instances of functional interfaces.'] ],
'functional interface' : [ null, ['Functional interface', 'An interface with a single abstract method whose purpose is to define a single function.'] ],
'garbage collection' : [ null, ['Garbage collection', 'Automatic reclamation of memory occupied by objects that are no longer referenced.'] ],
'garbage collector' : [ null, ['Garbage collection', 'Automatic reclamation of memory occupied by objects that are no longer referenced.'] ],
'generic class' : [ null, ['Generic class', 'A class with one or more type parameters.'] ],
'generic classes' : [ null, ['Generic class', 'A class with one or more type parameters.'] ],
'generic method' : [ null, ['Generic method', 'A method with one or more type parameters.'] ],
'generic programming' : [ null, ['Generic programming', 'Providing program components that can be reused in a wide variety of situations.'] ],
'Generic programming' : [ null, ['Generic programming', 'Providing program components that can be reused in a wide variety of situations.'] ],
'grammar' : [ null, ['Grammar', 'A set of rules that specifies which sequences of tokens are legal for a particular document set.'] ],
'graphics context' : [ null, ['Graphics context', 'A class through which a programmer can cause shapes to appear on a window or off-screen bitmap.'] ],
'grep' : [ null, ['<code>grep</code>', 'The &#x201C;global regular expression print&#x201D; search program, useful for finding all strings matching a pattern in a set of files.'] ],
'grid layout' : [ null, ['Grid layout', 'A layout management scheme in which components are placed into a two-dimensional grid. '] ],
'GUI' : [ null, ['GUI (Graphical User Interface)', 'A user interface in which the user supplies inputs through graphical components such as buttons, menus, and text fields.'] ],
'graphical user interface' : [ null, ['GUI (Graphical User Interface)', 'A user interface in which the user supplies inputs through graphical components such as buttons, menus, and text fields.'] ],
'hard disk' : [ null, ['Hard disk', 'A device that stores information on rotating platters with magnetic coating.'] ],
'hardware' : [ null, ['Hardware', 'The physical equipment for a computer or another device.'] ],
'hash code' : [ null, ['Hash code', 'A value that is computed by a hash function.'] ],
'hash collision' : [ null, ['Hash collision', 'Two different objects for which a hash function computes identical values.'] ],
'hash function' : [ null, ['Hash function', 'A function that computes an integer value from an object in such a way that different objects are likely to yield different values.'] ],
'hash table' : [ null, ['Hash table', 'A data structure in which elements are mapped to array positions according to their hash function values.'] ],
'hash tables' : [ null, ['Hash table', 'A data structure in which elements are mapped to array positions according to their hash function values.'] ],
'hashing' : [ null, ['Hashing', 'Applying a hash function to a set of objects.'] ],
'heap' : [ null, ['Heap', 'A balanced binary tree that is used for implementing sorting algorithms and priority queues.'] ],
'heapsort algorithm' : [ null, ['Heapsort algorithm', 'A sorting algorithm that inserts the values to be sorted into a heap.'] ],
'high-level programming language' : [ null, ['High-level programming language', 'A programming language that provides an abstract view of a computer and allows programmers to focus on their problem domain.'] ],
'high-level programming languages' : [ null, ['High-level programming language', 'A programming language that provides an abstract view of a computer and allows programmers to focus on their problem domain.'] ],
'higher-order function' : [ null, ['Higher-order function', 'A function that has another function as a parameter, or that yields another function.'] ],
'higher-order functions' : [ null, ['Higher-order function', 'A function that has another function as a parameter, or that yields another function.'] ],
'HTML' : [ null, ['HTML (Hypertext Markup Language)', 'The language in which web pages are described. '] ],
'HTTP' : [ null, ['HTTP (Hypertext Transfer Protocol)', 'The protocol that defines communication between web browsers and web servers. '] ],
'Hypertext Transfer Protocol' : [ null, ['HTTP (Hypertext Transfer Protocol)', 'The protocol that defines communication between web browsers and web servers. '] ],
'IDE' : [ null, ['IDE (Integrated Development Environment)', 'A programming environment that includes an editor, compiler, and debugger. '] ],
'infinite stream' : [ null, ['Infinite stream', 'A stream with an infinite number of elements.'] ],
'input stream' : [ null, ['Input stream', 'An abstraction for a sequence of bytes from which data can be read.'] ],
'Input and output streams' : [ null, ['Input and output stream', 'Abstractions for a sequence of bytes from which data can be read or to which data can be written.'] ],
'integrated development environment' : [ null, ['IDE (Integrated Development Environment)', 'A programming environment that includes an editor, compiler, and debugger. '] ],
'immutable class' : [ null, ['Immutable class', 'A class without a mutator method.'] ],
'immutable' : [ null, ['Immutable class', 'A class without a mutator method.'] ],
'implementing an interface' : [ null, ['Implementing an interface', 'Implementing a class that defines all methods specified in the interface.'] ],
'implements an interface' : [ null, ['Implementing an interface', 'Implementing a class that defines all methods specified in the interface.'] ],
'implements' : [ null, ['Implementing an interface', 'Implementing a class that defines all methods specified in the interface.'] ],
'implicit parameter' : [ null, ['Implicit parameter', 'The object on which a method is invoked. For example, in the call <code>x.f(y)</code>, the object <code>x</code> is the implicit parameter of the method <code>f</code>.'] ],
'importing a class or package' : [ null, ['Importing a class or package', 'Indicating the intention of referring to a class, or all classes in a package, by the simple name rather than the qualified name.'] ],
'inheritance' : [ null, ['Inheritance', 'The <span class="T4">is-a</span> relationship between a more general superclass and a more specialized subclass.'] ],
'initialization' : [ null, ['Initialization', 'Setting a variable to a well-defined value when it is created.'] ],
'initialize' : [ null, ['Initialization', 'Setting a variable to a well-defined value when it is created.'] ],
'inner class' : [ null, ['Inner class', 'A class that is defined inside another class.'] ],
'inner classes' : [ null, ['Inner class', 'A class that is defined inside another class.'] ],
'instance method' : [ null, ['Instance method', 'A method with an implicit parameter; that is, a method that is invoked on an instance of a class.'] ],
'instance methods' : [ null, ['Instance method', 'A method with an implicit parameter; that is, a method that is invoked on an instance of a class.'] ],
'instance of a class' : [ null, ['Instance of a class', 'An object whose type is that class.'] ],
'instance variable' : [ null, ['Instance variable', 'A variable defined in a class for which every object of the class has its own value.'] ],
'instance variables' : [ null, ['Instance variable', 'A variable defined in a class for which every object of the class has its own value.'] ],
'instantiation of a class' : [ null, ['Instantiation of a class', 'Construction of an object of that class.'] ],
'integer' : [ null, ['Integer', 'A number that cannot have a fractional part.'] ],
'integer division' : [ null, ['Integer division', 'Taking the quotient of two integers and discarding the remainder. In Java the <code>/</code> symbol denotes integer division if both arguments are integers. For example, <code>11/4</code> is <code>2</code>, not <code>2.75</code>.'] ],
'interface' : [ null, ['Interface', 'A type with no instance variables, only abstract methods and constants.'] ],
'interface type' : [ null, ['Interface', 'A type with no instance variables, only abstract methods and constants.'] ],
'internet' : [ null, ['Internet', 'A worldwide collection of networks, routing equipment, and computers using a common set of protocols that define how participants interact with each other.'] ],
'Internet' : [ null, ['Internet', 'A worldwide collection of networks, routing equipment, and computers using a common set of protocols that define how participants interact with each other.'] ],
'iterator' : [ null, ['Iterator', 'An object that can inspect all elements in a container such as a linked list.'] ],
'JavaBean' : [ null, ['JavaBean', 'A class with a no-argument constructor that exposes properties through its <code>get</code> and <code>set</code> methods. '] ],
'javadoc' : [ null, ['<code>javadoc</code>', 'The documentation generator in the Java SDK. It extracts documentation comments from Java source files and produces a set of linked HTML files.'] ],
'JSF' : [ null, ['JavaServer Faces (JSF)', 'A framework for developing web applications that aids in the separation of user interface and program logic.'] ],
'JavaServer Faces' : [ null, ['JavaServer Faces (JSF)', 'A framework for developing web applications that aids in the separation of user interface and program logic.'] ],
'JDBC' : [ null, ['JDBC (Java Database Connectivity)', 'The technology that enables a Java program to interact with relational databases. '] ],
'Java Database Connectivity' : [ null, ['JDBC (Java Database Connectivity)', 'The technology that enables a Java program to interact with relational databases. '] ],
'JDK' : [ null, ['JDK', 'The Java software development kit that contains the Java compiler and related development tools.'] ],
'join' : [ null, ['Join ', 'A database query that involves multiple tables.'] ],
'JSF container' : [ null, ['JSF container', 'A program that executes JSF applications.'] ],
'JVM' : [ null, ['JVM', 'The Java Virtual Machine.'] ],
'lambda expression' : [ null, ['Lambda expression', 'An expression that defines the parameters and return value of a method in a compact notation.'] ],
'lambda expressions' : [ null, ['Lambda expression', 'An expression that defines the parameters and return value of a method in a compact notation.'] ],
'layout manager' : [ null, ['Layout manager', 'A class that arranges user-interface components inside a container.'] ],
'lazy evaluation' : [ null, ['Lazy evaluation', 'Deferring the computation of a value until it is needed, thereby avoiding the computation if the value is never needed.'] ],
'lexicographic order' : [ null, ['Lexicographic ordering', 'Ordering strings in the same order as in a dictionary, by skipping all matching characters and comparing the first non-matching characters of both strings. For example, &#x201C;orbit&#x201D; comes before &#x201C;orchid&#x201D; in lexicographic ordering. Note that in Java, unlike a dictionary, the ordering is case sensitive: <code>Z</code> comes before <code>a</code>.'] ],
'lexicographic ordering' : [ null, ['Lexicographic ordering', 'Ordering strings in the same order as in a dictionary, by skipping all matching characters and comparing the first non-matching characters of both strings. For example, &#x201C;orbit&#x201D; comes before &#x201C;orchid&#x201D; in lexicographic ordering. Note that in Java, unlike a dictionary, the ordering is case sensitive: <code>Z</code> comes before <code>a</code>.'] ],
'library' : [ null, ['Library', 'A set of precompiled classes that can be included in programs.'] ],
'linear search' : [ null, ['Linear search', 'Searching a container (such as an array or list) for an object by inspecting each element in turn.'] ],
'linear' : [ null, ['Linear search', 'Searching a container (such as an array or list) for an object by inspecting each element in turn.'] ],
'linked list' : [ null, ['Linked list', 'A data structure that can hold an arbitrary number of objects, each of which is stored in a link object, which contains a pointer to the next link.'] ],
'literal' : [ null, ['Literal', 'A constant value in a program that is explicitly written as a number, such as &#8722;2 or 6.02214115E23, or as a character sequence, such as <code>&#x0022;Harry&#x0022;</code>.'] ],
'literals' : [ null, ['Literal', 'A constant value in a program that is explicitly written as a number, such as &#8722;2 or 6.02214115E23, or as a character sequence, such as <code>&#x0022;Harry&#x0022;</code>.'] ],
'local variable' : [ null, ['Local variable', 'A variable whose scope is a block.'] ],
'lock' : [ null, ['Lock', 'A data structure to regulate the scheduling of multiple threads. Once a thread has acquired a lock, other threads that also wish to acquire it must wait until the first thread relinquishes it.'] ],
'Locks' : [ null, ['Lock', 'A data structure to regulate the scheduling of multiple threads. Once a thread has acquired a lock, other threads that also wish to acquire it must wait until the first thread relinquishes it.'] ],
'lock object' : [ null, ['Lock object', 'An object that allows a single thread to execute a section of a program.'] ],
'logging' : [ null, ['Logging', 'Sending messages that trace the progress of a program to a file or window.'] ],
'logical operator' : [ null, ['Logical operator', 'An operator that can be applied to Boolean values. Java has three Boolean operators: <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code>.'] ],
'logic error' : [ null, ['Logic error', 'An error in a syntactically correct program that causes it to act differently from its specification. (A form of run-time error.)'] ],
'logic errors' : [ null, ['Logic error', 'An error in a syntactically correct program that causes it to act differently from its specification. (A form of run-time error.)'] ],
'loop' : [ null, ['Loop', 'A sequence of instructions that is executed repeatedly.'] ],
'loop and a half' : [ null, ['Loop and a half', 'A loop whose termination decision is neither at the beginning nor at the end.'] ],
'machine code' : [ null, ['Machine code', 'Instructions that can be executed directly by the CPU.'] ],
'magic number' : [ null, ['Magic number', 'A number that appears in a program without explanation.'] ],
'main method' : [ null, ['<code>main</code> method', 'The method that is first called when a Java application executes.'] ],
'managed bean' : [ null, ['Managed bean', 'A JavaBean that is managed by a JSF container.'] ],
'map' : [ null, ['Map', 'A data structure that keeps associations between key and value objects.'] ],
'markup' : [ null, ['Markup', 'Information about data that is added as humanly readable instructions. An example is the tagging of HTML documents with elements such as <code>&lt;h1&gt;</code> or <code>&lt;b&gt;</code>.'] ],
'memory location' : [ null, ['Memory location', 'A value that specifies the location of data in computer memory.'] ],
'merge sort' : [ null, ['Merge sort', 'A sorting algorithm that first sorts two halves of a data structure and then merges the sorted subarrays together.'] ],
'metadata' : [ null, ['Metadata', 'Data that describe properties of a data set. '] ],
'method' : [ null, ['Method', 'A sequence of statements that has a name, may have parameter variables, and may return a value. A method can be invoked any number of times, with different values for its parameter variables.'] ],
'methods' : [ null, ['Method', 'A sequence of statements that has a name, may have parameter variables, and may return a value. A method can be invoked any number of times, with different values for its parameter variables.'] ],
'method expression' : [ null, ['Method expression', 'In JSF, an expression describing a bean and a method that is to be applied to the bean at a later time.'] ],
'method reference' : [ null, ['Method reference', 'An expression of the form <code>Class::method</code> or <code>object::method</code> that, like a lambda expression, can be converted into an instance of a functional interface.'] ],
'mixed content' : [ null, ['Mixed content', 'In XML, a markup element that contains both text and other elements.'] ],
'modifier' : [ null, ['Modifier', 'A reserved word that indicates the accessibility of a feature, such as <code>private</code> or <code>public</code>.'] ],
'modulus' : [ null, ['Modulus', 'The <code>%</code> operator that computes the remainder of an integer division.'] ],
'mutator method' : [ null, ['Mutator method', 'A method that changes the state of an object.'] ],
'mutator' : [ null, ['Mutator method', 'A method that changes the state of an object.'] ],
'mutual recursion' : [ null, ['Mutual recursion', 'Cooperating methods that call each other.'] ],
'name clash' : [ null, ['Name clash', 'Accidentally using the same name to denote two program features in a way that cannot be resolved by the compiler.'] ],
'name clashes' : [ null, ['Name clash', 'Accidentally using the same name to denote two program features in a way that cannot be resolved by the compiler.'] ],
'navigation rule' : [ null, ['Navigation rule', 'In JSF, a rule that describes when to move from one web page to another.'] ],
'nested loop' : [ null, ['Nested loop', 'A loop that is contained in another loop.'] ],
'networks' : [ null, ['Network', 'An interconnected system of computers and other devices.'] ],
'new operator' : [ null, ['<code>new</code> operator', 'An operator that allocates new objects.'] ],
'newline' : [ null, ['Newline', 'The <code>&#x0027;\\n&#x0027; </code>character, which indicates the end of a line.'] ],
'no-argument constructor' : [ null, ['No-argument constructor', 'A constructor that takes no arguments.'] ],
'null reference' : [ null, ['Null reference', 'A reference that does not refer to any object.'] ],
'number literal' : [ null, ['Number Literal', 'A constant value in a program that is explicitly written as a number, such as &#8722;2 or 6.02214115E23.'] ],
'object' : [ null, ['Object', 'A value of a class type.'] ],
'objects' : [ null, ['Object', 'A value of a class type.'] ],
'object-oriented programming' : [ null, ['Object-oriented programming', 'Designing a program by discovering objects, their properties, and their relationships.'] ],
'object reference' : [ null, ['Object reference', 'A value that denotes the location of an object in memory. In Java, a variable whose type is a class contains a reference to an object of that class.'] ],
'off-by-one error' : [ null, ['Off-by-one error', 'A common programming error in which a value is one larger or smaller than it should be.'] ],
'off-by-one errors' : [ null, ['Off-by-one error', 'A common programming error in which a value is one larger or smaller than it should be.'] ],
'opening a file' : [ null, ['Opening a file', 'Preparing a file for reading or writing.'] ],
'operating system' : [ null, ['Operating system', 'The software that launches application programs and provides services (such as a file system) for those programs.'] ],
'operator' : [ null, ['Operator', 'A symbol denoting a mathematical or logical operation, such as <code>+</code> or <code>&amp;&amp;</code>.'] ],
'operators' : [ null, ['Operator', 'A symbol denoting a mathematical or logical operation, such as <code>+</code> or <code>&amp;&amp;</code>.'] ],
'operator associativity' : [ null, ['Operator associativity', 'The rule that governs in which order operators of the same precedence are executed. For example, in Java the <code>- </code>operator is left-associative because <code>a&#160;-&#160;b&#160;-&#160;c</code> is interpreted as <code>(a&#160;-&#160;b)&#160;-&#160;c</code>, and <code>=</code> is right-associative because <code>a&#160;=&#160;b&#160;=&#160;c</code> is interpreted as <code>a&#160;=&#160;(b&#160;=&#160;c)</code>.'] ],
'operator precedence' : [ null, ['Operator precedence', 'The rule that governs which operator is evaluated first. For example, in Java the <code>&amp;&amp;</code> operator has a higher precedence than the <code>||</code> operator. Hence <code>a&#160;||&#160;b&#160;&amp;&amp;&#160;c</code> is interpreted as <code>a&#160;||&#160;(b&#160;&amp;&amp;&#160;c)</code>. (See Appendix B.)'] ],
'Optional value' : [ null, ['<code>Optional</code> value', 'An instance of the <code>Optional<T></code> class, representing either a value of type <code>T</code> or the absence of such a value.'] ],
'output stream' : [ null, ['Output stream', 'An abstraction for a sequence of bytes to which data can be written.'] ],
'output streams' : [ null, ['Output stream', 'An abstraction for a sequence of bytes to which data can be written.'] ],
'overloading' : [ null, ['Overloading', 'Giving more than one meaning to a method name.'] ],
'overloaded' : [ null, ['Overloading', 'Giving more than one meaning to a method name.'] ],
'overriding' : [ null, ['Overriding', 'Redefining a method in a subclass.'] ],
'override' : [ null, ['Overriding', 'Redefining a method in a subclass.'] ],
'package' : [ null, ['Package', 'A collection of related classes. The <code>import</code> statement is used to access one or more classes in a package.'] ],
'packages' : [ null, ['Package', 'A collection of related classes. The <code>import</code> statement is used to access one or more classes in a package.'] ],
'panel' : [ null, ['Panel', 'A user-interface component with no visual appearance. It can be used to group other components.'] ],
'panels' : [ null, ['Panel', 'A user-interface component with no visual appearance. It can be used to group other components.'] ],
'parallel arrays' : [ null, ['Parallel arrays', 'Arrays of the same length, in which corresponding elements are logically related.'] ],
'parallel stream' : [ null, ['Parallel stream', 'A stream that attempts to apply operations in parallel.'] ],
'parameter' : [ null, ['Parameter', 'An item of information that is specified to a method when the method is called. For example, in the call <code>System.out.println(&#x0022;Hello,&#160;World!&#x0022;)</code>, the parameters are the implicit parameter <code>System.out</code> and the explicit parameter <code>&#x0022;Hello,&#160;World!&#x0022;</code>.'] ],
'parameter passing' : [ null, ['Parameter passing', 'Specifying expressions to be arguments for a method when it is called.'] ],
'parameter variable' : [ null, ['Parameter variable', 'A variable of a method that is initialized with a value when the method is called.'] ],
'parameter variables' : [ null, ['Parameter variable', 'A variable of a method that is initialized with a value when the method is called.'] ],
'parse tree' : [ null, ['Parse tree', 'A tree structure that shows how a string conforms to the rules of a grammar.'] ],
'parser' : [ null, ['Parser', 'A program that reads a document, checks whether it is syntactically correct, and takes some action as it processes the document.'] ],
'partially filled array' : [ null, ['Partially filled array', 'An array that is not filled to capacity, together with a companion variable that indicates the number of elements actually stored.'] ],
'path' : [ null, ['Path (to a file or directory)', 'The sequence of directory names and, for a file, a file name at the end, that describes how to reach the file or directory from a given starting point.'] ],
'permutation' : [ null, ['Permutation', 'A rearrangement of a set of values.'] ],
'polymorphism' : [ null, ['Polymorphism', 'Selecting a method among several methods that have the same name on the basis of the actual types of the implicit parameters.'] ],
'postfix operator' : [ null, ['Postfix operator', 'A unary operator that is written after its argument.'] ],
'prefix operator' : [ null, ['Prefix operator', 'A unary operator that is written before its argument.'] ],
'prepared statement' : [ null, ['Prepared statement', 'A SQL statement with a precomputed query strategy.'] ],
'primary key' : [ null, ['Primary key', 'A column (or combination of columns) whose value uniquely specifies a table record. '] ],
'primitive type' : [ null, ['Primitive type', 'In Java, a number type or <code>boolean</code>.'] ],
'primitive types' : [ null, ['Primitive type', 'In Java, a number type or <code>boolean</code>.'] ],
'priority queue' : [ null, ['Priority queue', 'An abstract data type that enables efficient insertion of elements and efficient removal of the smallest element. '] ],
'programming' : [ null, ['Programming', 'The act of designing and implementing computer programs.'] ],
'project' : [ null, ['Project', 'A collection of source files and their dependencies.'] ],
'prompt' : [ null, ['Prompt', 'A string that tells the user to provide input.'] ],
'property' : [ null, ['Property', 'A named value that is managed by a component.'] ],
'properties' : [ null, ['Property', 'A named value that is managed by a component.'] ],
'pseudocode' : [ null, ['Pseudocode', 'A high-level description of the actions of a program or algorithm, using a mixture of English and informal programming language syntax.'] ],
'pseudorandom' : [ null, ['Pseudorandom number', 'A number that appears to be random but is generated by a mathematical formula.'] ],
'pseudorandom number' : [ null, ['Pseudorandom number', 'A number that appears to be random but is generated by a mathematical formula.'] ],
'pseudorandom numbers' : [ null, ['Pseudorandom number', 'A number that appears to be random but is generated by a mathematical formula.'] ],
'public interface' : [ null, ['Public interface', 'The features (methods, variables, and nested types) of a class that are accessible to all clients.'] ],
'queue' : [ null, ['Queue', 'A collection of items with &#x201C;first in, first out&#x201D; retrieval. '] ],
'quicksort' : [ null, ['Quicksort', 'A generally fast sorting algorithm that picks an element, called the pivot, partitions the sequence into the elements smaller than the pivot and those larger than the pivot, and then recursively sorts the subsequences. '] ],
'race condition' : [ null, ['Race condition', 'A condition in which the effect of multiple threads on shared data depends on the order in which the threads are scheduled.'] ],
'radio buttons' : [ null, ['Radio button', 'A user&#x002D;interface component that can be used for selecting one of several options.'] ],
'radio button' : [ null, ['Radio button', 'A user&#x002D;interface component that can be used for selecting one of several options.'] ],
'RAM' : [ null, ['RAM (random-access memory)', 'Electronic circuits in a computer that can store code and data of running programs.'] ],
'random-access memory' : [ null, ['RAM (random-access memory)', 'Electronic circuits in a computer that can store code and data of running programs.'] ],
'random access' : [ null, ['Random access', 'The ability to access any value directly without having to read the values preceding it.'] ],
'reader' : [ null, ['Reader', 'In the Java input/output library, a class from which to read characters.'] ],
'readers' : [ null, ['Reader', 'In the Java input/output library, a class from which to read characters.'] ],
'Readers' : [ null, ['Reader', 'In the Java input/output library, a class from which to read characters.'] ],
'recursion' : [ null, ['Recursion', 'A method for computing a result by decomposing the inputs into simpler values and applying the same method to them.'] ],
'recursive method' : [ null, ['Recursive method', 'A method that can call itself with simpler values. It must handle the simplest values without calling itself.'] ],
'red-black tree' : [ null, ['Red-black tree', 'A kind of binary search tree that rebalances itself after each insertion and removal.'] ],
'red-black trees' : [ null, ['Red-black tree', 'A kind of binary search tree that rebalances itself after each insertion and removal.'] ],
'redirection' : [ null, ['Redirection', 'Linking the input or output of a program to a file instead of the keyboard or display.'] ],
'reference' : [ null, ['Reference', 'A value that denotes the location of an object in memory. In Java, a variable whose type is a class contains a reference to an object of that class.'] ],
'regression testing' : [ null, ['Regression testing', 'Keeping old test cases and testing every revision of a program against them.'] ],
'regular expression' : [ null, ['Regular expression', 'A string that defines a set of matching strings according to their content. Each part of a regular expression can be a specific required character; one of a set of permitted characters such as <code>[abc]</code>, which can be a range such as <code>[a-z]</code>; any character not in a set of forbidden characters, such as <code>[^0-9]</code>; a repetition of one or more matches, such as <code>[0-9]+</code>, or zero or more, such as <code>[ACGT]</code>; one of a set of alternatives, such as <code>and|et|und</code>; or various other possibilities. For example, <code>[A-Za-z][0-9]+</code> matches <code>Cloud9</code> or <code>007</code> but not <code>Jack</code>.'] ],
'relational database' : [ null, ['Relational database', 'A data repository that stores information in tables and retrieves data as the result of queries that are formulated in terms of table relationships. '] ],
'relational operator' : [ null, ['Relational operator', 'An operator that compares two values, yielding a Boolean result.'] ],
'reserved word' : [ null, ['Reserved word', 'A word that has a special meaning in a programming language and therefore cannot be used as a name by the programmer.'] ],
'reserved words' : [ null, ['Reserved word', 'A word that has a special meaning in a programming language and therefore cannot be used as a name by the programmer.'] ],
'return value' : [ null, ['Return value', 'The value returned by a method through a <code>return</code> statement.'] ],
'reverse Polish notation' : [ null, ['Reverse Polish notation', 'A style of writing expressions in which the operators are written following the operands, such as<code> 2 3 4 * + </code>for<code> 2 + 3 * 4</code>.'] ],
'roundoff error' : [ null, ['Roundoff error', 'An error introduced by the fact that the computer can store only a finite number of digits of a floating-point number.'] ],
'roundoff errors' : [ null, ['Roundoff error', 'An error introduced by the fact that the computer can store only a finite number of digits of a floating-point number.'] ],
'runnable thread' : [ null, ['Runnable thread', 'A thread that can proceed provided it is given a time slice to do work.'] ],
'run-time error' : [ null, ['Run-time error', 'An error in a syntactically correct program that causes it to act differently from its specification.'] ],
'run-time stack' : [ null, ['Run-time stack', 'The data structure that stores the local variables of all called methods as a program runs.'] ],
'scope' : [ null, ['Scope', 'The part of a program in which a variable is defined.'] ],
'secondary storage' : [ null, ['Secondary storage', 'Storage that persists without electricity, e.g., a hard disk.'] ],
'Secondary storage' : [ null, ['Secondary storage', 'Storage that persists without electricity, e.g., a hard disk.'] ],
'selection sort' : [ null, ['Selection sort', 'A sorting algorithm in which the smallest element is repeatedly found and removed until no elements remain.'] ],
'sentinel' : [ null, ['Sentinel', 'A value in input that is not to be used as an actual input value but to signal the end of input.'] ],
'sequential access' : [ null, ['Sequential access', 'Accessing values one after another without skipping over any of them.'] ],
'sequential search' : [ null, ['Sequential search', 'Searching a container (such as an array or list) for an object by inspecting each element in turn.'] ],
'serialization' : [ null, ['Serialization', 'The process of saving an object, and all the objects that it references, to a stream. '] ],
'set' : [ null, ['Set', 'An unordered collection that allows efficient addition, location, and removal of elements. '] ],
'shadowing' : [ null, ['Shadowing', 'Hiding a variable by defining another one with the same name.'] ],
'shallow copy' : [ null, ['Shallow copy', 'Copying only the reference to an object.'] ],
'shell script' : [ null, ['Shell script', 'A file that contains commands for running programs and manipulating files. Typing the name of the shell script file on the command line causes those commands to be executed.'] ],
'shell window' : [ null, ['Shell window', 'A window for interacting with an operating system through textual commands.'] ],
'short-circuit evaluation' : [ null, ['Short-circuit evaluation', 'Evaluating only a part of an expression if the remainder cannot change the result.'] ],
'side effect' : [ null, ['Side effect', 'An effect of a method other than returning a value.'] ],
'sign bit' : [ null, ['Sign bit', 'The bit of a binary number that indicates whether the number is positive or negative.'] ],
'socket' : [ null, ['Socket', 'An object that encapsulates a TCP/IP connection. To communicate with the other endpoint of the connection, you use the input and output streams attached to the socket. '] ],
'software' : [ null, ['Software', 'The intangible instructions and data that are necessary for operating a computer or another device.'] ],
'source code' : [ null, ['Source code', 'Instructions in a programming language that need to be translated before execution on a computer.'] ],
'source file' : [ null, ['Source file', 'A file containing instructions in a programming language such as Java.'] ],
'source files' : [ null, ['Source file', 'A file containing instructions in a programming language such as Java.'] ],
'SQL' : [ null, ['SQL (Structured Query Language)', 'A command language for interacting with a database.'] ],
'structured query language' : [ null, ['SQL (Structured Query Language)', 'A command language for interacting with a database.'] ],
'stack' : [ null, ['Stack', 'A data structure with &#x201C;last-in, first-out&#x201D; retrieval. Elements can be added and removed only at one position, called the top of the stack.'] ],
'stack trace' : [ null, ['Stack trace', 'A printout of the call stack, listing all currently pending method calls.'] ],
'state' : [ null, ['State', 'The current value of an object, which is determined by the cumulative action of all methods that were invoked on it.'] ],
'state diagram' : [ null, ['State diagram', 'A diagram that depicts state transitions and their causes.'] ],
'statement' : [ null, ['Statement', 'A syntactical unit in a program. In Java a statement is either a simple statement, a compound statement, or a block.'] ],
'statements' : [ null, ['Statement', 'A syntactical unit in a program. In Java a statement is either a simple statement, a compound statement, or a block.'] ],
'static method' : [ null, ['Static method', 'A method with no implicit parameter. '] ],
'static methods' : [ null, ['Static method', 'A method with no implicit parameter. '] ],
'static variable' : [ null, ['Static variable', 'A variable defined in a class that has only one value for the whole class, and which can be accessed and changed by any method of that class.'] ],
'stepwise refinement' : [ null, ['Stepwise refinement', 'The process of solving a problem that starts out with a subdivision into steps, then continues by further subdividing those steps.'] ],
'stored procedure' : [ null, ['Stored procedure', 'A database procedure that is executed in the database kernel.'] ],
'stream' : [ null, ['Stream', 'A data structure representing a sequence of elements, each of which is visited at most once, that enables operations to be applied in an efficient way (for example, lazily, or in parallel).'] ],
'stream (input/output)' : [ null, ['Stream (input/output)', 'An abstraction for a sequence of bytes from which data can be read or to which data can be written.'] ],
'string' : [ null, ['String', 'A sequence of characters.'] ],
'stub' : [ null, ['Stub', 'A method with no or minimal functionality.'] ],
'subclass' : [ null, ['Subclass', 'A class that inherits variables and methods from a superclass but adds instance variables, adds methods, or redefines methods.'] ],
'substitution principle' : [ null, ['Substitution principle', 'The principle that a subclass object can be used in place of any superclass object.'] ],
'superclass' : [ null, ['Superclass', 'A general class from which a more specialized class (a subclass) inherits.'] ],
'Swing' : [ null, ['Swing', 'A Java toolkit for implementing graphical user interfaces.'] ],
'symmetric bounds' : [ null, ['Symmetric bounds', 'Bounds that include the starting index and the ending index.'] ],
'symmetric' : [ null, ['Symmetric bounds', 'Bounds that include the starting index and the ending index.'] ],
'synchronized block' : [ null, ['Synchronized block', 'A block of code that is controlled by a lock. To start execution, a thread must acquire the lock. Upon completion, it relinquishes the lock.'] ],
'synchronized method' : [ null, ['Synchronized method', 'A method that is controlled by a lock. In order to execute the method, the calling thread must acquire the lock.'] ],
'syntax' : [ null, ['Syntax', 'Rules that define how to form instructions in a particular programming language.'] ],
'syntax diagram' : [ null, ['Syntax diagram', 'A graphical representation of grammar rules.'] ],
'syntax diagrams' : [ null, ['Syntax diagram', 'A graphical representation of grammar rules.'] ],
'syntax error' : [ null, ['Syntax error', 'An instruction that does not follow the programming language rules and is rejected by the compiler. (A form of compile-time error.)'] ],
'syntax errors' : [ null, ['Syntax error', 'An instruction that does not follow the programming language rules and is rejected by the compiler. (A form of compile-time error.)'] ],
'tab character' : [ null, ['Tab character', 'The <code>&#x0027;\t&#x0027;</code> character, which advances the next character on the line to the next one of a set of fixed positions known as tab stops.'] ],
'tab characters' : [ null, ['Tab character', 'The <code>&#x0027;\t&#x0027;</code> character, which advances the next character on the line to the next one of a set of fixed positions known as tab stops.'] ],
'TCP/IP' : [ null, ['TCP/IP (Transmission Control Protocol/Internet Protocol)', 'The pair of communication protocols that is used to establish reliable transmission of data between two computers on the Internet.'] ],
'terminal operation' : [ null, ['Terminal operation', 'An operation on a stream that yields a value, causing any required pending stream operations to be executed.'] ],
'terminal operations' : [ null, ['Terminal operation', 'An operation on a stream that yields a value, causing any required pending stream operations to be executed.'] ],
'ternary operator' : [ null, ['Ternary operator', 'An operator with three arguments. Java has one ternary operator, <code>a&#160;?&#160;b&#160;:&#160;c</code>.'] ],
'test suite' : [ null, ['Test suite', 'A set of test cases for a program.'] ],
'text field' : [ null, ['Text field', 'A user-interface component that allows a user to provide text input.'] ],
'text file' : [ null, ['Text file', 'A file in which values are stored in their text representation.'] ],
'thread' : [ null, ['Thread', 'A program unit that is executed independently of other parts of the program.'] ],
'three-tier application' : [ null, ['Three-tier application', 'An application that is composed of separate tiers for presentation logic, business logic, and data storage. '] ],
'throw an exception' : [ null, ['Throw an exception', 'Indicate an abnormal condition by terminating the normal control flow of a program and transferring control to a matching <code>catch</code> clause.'] ],
'throwing an exception' : [ null, ['Throwing an exception', 'Indicating an abnormal condition by terminating the normal control flow of a program and transferring control to a matching <code>catch</code> clause.'] ],
'throws clause' : [ null, ['<code>throws</code> clause', 'Indicates the types of the checked exceptions that a method may throw.'] ],
'throws specifier' : [ null, ['<code>throws</code> specifier', 'Indicates the types of the checked exceptions that a method may throw.'] ],
'time slice' : [ null, ['Time slice', 'A small amount of time used when scheduling threads. Each thread is given a small amount of time (a slice) in which to do its work, then control is given to another thread.'] ],
'token' : [ null, ['Token', 'A sequence of consecutive characters from an input source that belongs together for the purpose of analyzing the input. For example, a token can be a sequence of characters other than white space. '] ],
'tokens' : [ null, ['Token', 'A sequence of consecutive characters from an input source that belongs together for the purpose of analyzing the input. For example, a token can be a sequence of characters other than white space. '] ],
'trace message' : [ null, ['Trace message', 'A message that is printed during a program run for debugging purposes.'] ],
'trace messages' : [ null, ['Trace message', 'A message that is printed during a program run for debugging purposes.'] ],
'transaction' : [ null, ['Transaction', 'A set of database operations that should either succeed in their entirety, or not happen at all.'] ],
'tree' : [ null, ['Tree', 'A data structure consisting of nodes, each of which has a list of child nodes, and one of which is distinguished as the root node.'] ],
'try block' : [ null, ['<code>try</code> block', 'A block of statements that contains exception processing clauses. A <code>try</code> block contains at least one <code>catch</code> or <code>finally</code> clause.'] ],
'try statement' : [ null, ['<code>try</code> statement', 'A statement with a body containing one or more statements that are executed until the end of the body is reached or an exception occurs, together with clauses that are invoked when exceptions of a particular type occur.'] ],
'try-with-resources' : [ null, ['<code>try</code>-with-resources', 'A version of the <code>try</code> statement whose header initializes a variable of a class that implements the <code>AutoCloseable</code> interface. The <code>close</code> method is invoked on that variable when the <code>try</code> statement terminates, either normally or through an exception.'] ],
'Turing machine' : [ null, ['Turing machine', 'A very simple model of computation that is used in theoretical computer science to explore computability of problems.'] ],
'two-dimensional array' : [ null, ['Two-dimensional array', 'A tabular arrangement of elements in which an element is specified by a row and a column index.'] ],
'type' : [ null, ['Type', 'A named set of values and the operations that can be carried out with them.'] ],
'type parameter' : [ null, ['Type parameter', 'A parameter in a generic class or method that can be replaced with an actual type.'] ],
'type variable' : [ null, ['Type variable', 'A variable in the declaration of a generic type that can be instantiated with a type.'] ],
'unary operator' : [ null, ['Unary operator', 'An operator with one argument.'] ],
'unchecked exception' : [ null, ['Unchecked exception', 'An exception that the compiler doesn&#8217;t check.'] ],
'unchecked exceptions' : [ null, ['Unchecked exception', 'An exception that the compiler doesn&#8217;t check.'] ],
'Unicode' : [ null, ['Unicode', 'A standard code that assigns code values consisting of two bytes to characters used in scripts around the world. Java stores all characters as their Unicode values.'] ],
'unified modeling language' : [ null, ['Unified Modeling Language (UML)', 'A notation for specifying, visualizing, constructing, and documenting the artifacts of software systems.'] ],
'Unified Modeling Language' : [ null, ['Unified Modeling Language (UML)', 'A notation for specifying, visualizing, constructing, and documenting the artifacts of software systems.'] ],
'UML' : [ null, ['Unified Modeling Language (UML)', 'A notation for specifying, visualizing, constructing, and documenting the artifacts of software systems.'] ],
'uninitialized variable' : [ null, ['Uninitialized variable', 'A variable that has not been set to a particular value. In Java, using an uninitialized local variable is a syntax error.'] ],
'unit test' : [ null, ['Unit test', 'A test of a method by itself, isolated from the remainder of the program.'] ],
'unit testing' : [ null, ['Unit test', 'A test of a method by itself, isolated from the remainder of the program.'] ],
'URL' : [ null, ['URL (Uniform Resource Locator)', 'A pointer to an information resource (such as a web page or an image) on the World Wide Web. '] ],
'Uniform Resource Locator' : [ null, ['URL (Uniform Resource Locator)', 'A pointer to an information resource (such as a web page or an image) on the World Wide Web. '] ],
'user-interface component' : [ null, ['User-interface component', 'A building block for a graphical user interface, such as a button or a text field. User-interface components are used to present information to the user and allow the user to enter information to the program.'] ],
'user-interface event' : [ null, ['User-interface event', 'A notification to a program that a user action such as a key press, mouse move, or menu selection has occurred.'] ],
'value expression' : [ null, ['Value expression', 'In JSF, an expression describing a bean and a property that is to be accessed at a later time.'] ],
'variable' : [ null, ['Variable', 'A symbol in a program that identifies a storage location that can hold different values.'] ],
'variables' : [ null, ['Variable', 'A symbol in a program that identifies a storage location that can hold different values.'] ],
'virtual machine' : [ null, ['Virtual machine', 'A program that simulates a CPU that can be implemented efficiently on a variety of actual machines. A given program in Java bytecode can be executed by any Java virtual machine, regardless of which CPU is used to run the virtual machine itself.'] ],
'void' : [ null, ['<code>void</code>', 'A reserved word indicating no type or an unknown type.'] ],
'walkthrough' : [ null, ['Walkthrough', 'A step-by-step manual simulation of a computer program.'] ],
'web application' : [ null, ['Web application', 'An application that executes on a web server and whose user interface is displayed in a web browser.'] ],
'white space' : [ null, ['White space', 'Any sequence of only space, tab, and newline characters.'] ],
'white-box testing' : [ null, ['White-box testing', 'Testing methods by taking their implementations into account, in contrast to black-box testÂ­ing; for example, by selecting boundary test cases and ensuring that all branches of the code are covered by some test case.'] ],
'wrapper class' : [ null, ['Wrapper class', 'A class that contains a primitive type value, such as <code>Integer</code>.'] ],
'wrapper classes' : [ null, ['Wrapper class', 'A class that contains a primitive type value, such as <code>Integer</code>.'] ],
'writer' : [ null, ['Writer', 'In the Java input/output library, a class to which characters are to be sent.'] ],
'writers' : [ null, ['Writer', 'In the Java input/output library, a class to which characters are to be sent.'] ],
'XML' : [ null, ['XML (Extensible Markup Language)', 'A simple format for structured data in which the structure is indicated by markup instructions. '] ],
'Extensible Markup Language' : [ null, ['XML (Extensible Markup Language)', 'A simple format for structured data in which the structure is indicated by markup instructions. '] ],
        }
    }
});


$(document).ready(function(){
	var event;
	//-- Loop through all glossary elements and add click events
	$(".glossary").each(function() {
		//---Assign click event to launch glossary ppopup
		$(this).click(function(e,ui) {
			event = e;
			//--Fetch glossary term
			var glossaryTerm = gt.gettext($(e.currentTarget).text());
			//-- Call to open glossary box
			displayGlossaryPopup(glossaryTerm);
		});
	});
	
	
	function displayGlossaryPopup(arrGlossaryTerm)
	{
		//--- Remove previous glossary box if exist
		$("#glossaryPopup").remove();
	
		//--- Create popup 
		var popupBox = $('<div id="glossaryPopup" class="glossary_box"><span class="glossary_close_btn"></span><div class="glossaryContentBubble"><p class="glossaryHeading">'+arrGlossaryTerm[0]+'</p><p class="glossaryContent">'+arrGlossaryTerm[1]+'</p></div></div>');
	
		//---Append to body
		$("body").append(popupBox);
	
		//--- Add close button event
		$(popupBox).find(".glossary_close_btn").click(function(e,ui) {
			//-- Remove glossary box
			$("#glossaryPopup").remove();
		});
		
		//-- Apply CSS properties to box
		popupBox.css('display','inline');     
		popupBox.css("position", "absolute");
		
		//-- Get position difference if box out of page area
		var diffX = ((event.pageX + 15 + popupBox.width()) - $(window).scrollLeft());
		var diffY = ((event.pageY + 15 + popupBox.height()) - $(window).scrollTop());
		
		//-- Align box in opposite position is getting out of page width
		if (diffX<=$(window).innerWidth()){
			popupBox.css('left',event.pageX+15);
		}else{
			popupBox.css('left',event.pageX-20-popupBox.width());
		}
		
		//-- Align box in opposite position is getting out of page height
		if (diffY<=$(window).innerHeight()){
			popupBox.css('top',event.pageY+15);
		}else{
			popupBox.css('top',event.pageY-20-popupBox.height());
		}
	}
});